{#
/**
 * @file
 * Bartik's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
{{ attach_library('bartik/classy.node') }}
<article{{attributes.addClass(classes)}}>
	<header>
		{{ title_prefix }}
		{% if label and not page %}
			<h2{{title_attributes.addClass('node__title')}}>
				<a href="{{ url }}" rel="bookmark">{{ label }}</a>
			</h2>
		{% endif %}
		{{ title_suffix }}
		{% if display_submitted %}
			<div class="node__meta">
				{{ author_picture }}
				<span{{author_attributes}}>
					{% trans %}Submitted by
					{{ author_name }}
					on
					{{ date }}{% endtrans %}
				</span>
				{{ metadata }}
			</div>
		{% endif %}
	</header>
	<div{{content_attributes.addClass('node__content','clearfix')}}>
		{{ content|without('links') }}
	</div>
</article>
<h2>file_url($uri)</h2>

<img src="{{ file_url(node.field_main_image.entity.uri.value) }}" alt="{{ node.field_main_image.alt }}" height="{{ node.field_main_image.height }}" width="{{ node.field_main_image.width }}"/>

<div class="sale-ends-at">
	Sale ends:
	{{ 'tomorrow noon'|date('D M jS ga') }}
  &copy; {{ 'now'|date('Y') }}
</div>

{% filter upper %}
    All of this text will become uppercase.
{% endfilter %}
<div>{{ 3.14159|round(method="ceil") }}</div>

{{ 'Joe’s \”special\” page'|e }}

<p>Class: {{ 'Hola45-2 56 Hola'|clean_class }}</p>
<p>Id: {{ 'Hola45-2 56 Hola'|clean_id }}</p>

<p>Date short {{ node.created.value|format_date('short') }}</p>

{% set letters = ['a', 'b', 'c'] %}
<p>Letters: {{ letters|safe_join(' - ') }}</p>
hola
<div class="example code">
    <strong>{{ ' hola mundo' }}</strong>

</div>

{% spaceless %}
<div class="example code">
    <strong>{{ ' hola mundo' }}</strong>
</div>
{% endspaceless %}


------------<br>
{% trans %}Hello {{ user.name }}, today's date is {{ date|placeholder }}.{% endtrans %}
<br>
<p>{{ custom_footer_text }}</p>

{%
  set classes = [
    'my-class',
    'my-other-class',
    'my-special-class',
  ]
%}

<div{{ attributes.addClass(classes).removeClass('my-special-class').setAttribute('id', 'myID') }}>test</div>
<div{{ attributes.setAttribute('id', 'myID').removeAttribute('id') }}>test2</div>
<div{{ attributes.setAttribute('data-bundle', node.bundle) }}>test3</div>
{# {{ vardumper(attributes) }} #}
{% if attributes.hasClass('clearfix') %}
  Yes, the class 'clearfix' is in the div.
{% endif %}
<div{{ attributes.addClass('hello').removeClass('clearfix') }}></div>

<div class="{{ attributes.class }} my-custom-class"{{ attributes|without('clearfix') }}>h</div>

{{ 'You \'re <strong>hip</strong>, you\'re cool, you\'re a.'|raw }}
{{ _self.exampleMarco(1, 2, 3) }}

{% macro exampleMarco(a, b, c) %}
	<div>a
		{{a}}</div>
	<div>b
		{{b}}</div>
	<div>c
		{{c}}</div>
{% endmacro %}

